package main

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"kanade/internal/index"
	"os"
	"path/filepath"
	"text/template"
)

func init() {
	commands = append(commands, command{
		usage: "make-render-makefile DIR",
		f:     wrapCmd(makefileCommand),
	})
}

const renderPageRule = `clean_paths += $(srv_www_dir)/{{.Path}}.html
all: $(srv_www_dir)/{{.Path}}.html
$(srv_www_dir)/{{.Path}}.html: $(local_dir)/pages/{{.Path}}.html $(kanade_path)
	mkdir -p $(srv_www_dir)/{{.Dir}}
	$(kanade_path) render $< > $@
`

const ensureDirRule = ``

func makefileCommand(args []string) error {
	if len(args) != 1 {
		return errors.New("must provide one argument")
	}
	path := args[0]
	e, err := readIndex(path)
	if err != nil {
		return err
	}
	bw := bufio.NewWriter(os.Stdout)
	if err := writeRenderMakefile(bw, e); err != nil {
		return err
	}
	return bw.Flush()
}

func writeRenderMakefile(w io.Writer, e []index.Entry) error {
	fmt.Fprintf(w, "# Code generated by kanade make-render-makefile; DO NOT EDIT.\n")
	t := template.Must(template.New("").Parse(renderPageRule))
	for _, e := range e {
		v := struct {
			Path string
			Dir  string
		}{
			Path: e.Path,
			Dir:  filepath.Dir(e.Path),
		}
		if err := t.Execute(w, v); err != nil {
			return err
		}
	}
	return nil
}
